{"version":3,"sources":["../../app-ES6/services/connectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createConnection","target","result","onsuccess","bind","Error","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCACCC,iB;;;;;;;oDACa;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;AACAQ,wCAAYI,eAAZ,GAA6B,UAACC,CAAD,EAAK;AAC9BT,kDAAkBU,iBAAlB,CAAoCD,EAAEE,MAAF,CAASC,MAA7C;AACH,6BAFD;AAGAR,wCAAYS,SAAZ,GAAsB,UAACJ,CAAD,EAAK;;AAEvB,oCAAG,CAACX,UAAJ,EAAe;AACXA,iDAAaW,EAAEE,MAAF,CAASC,MAAtB;AACAb,4CAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAMgB,MAAM,+CAAN,CAAN;AACH,qCAFD;AAGH;AACGb,wCAAQJ,UAAR;AACP,6BAVD;AAWAM,wCAAYY,OAAZ,GAAoB,UAACP,CAAD,EAAK;AACrBQ,wCAAQC,GAAR,CAAYT,EAAEE,MAAF,CAASQ,KAArB;AACAhB,uCAAOM,EAAEE,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBApBM,CAAP;AAqBH;;;sDAEwBtB,U,EAAW;AAChCH,+BAAO0B,OAAP,CAAe,iBAAQ;AACnB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH;;;sDACuB;AACpB5B;AACAD,qCAAa,IAAb;AACH","file":"connectionFactory.js","sourcesContent":["\r\n    const stores = ['negociacoes']\r\n    const version = 3\r\n    const dbName = 'aluraframe'\r\n    var connection = null\r\n    var close = null\r\n    export class ConnectionFactory{\r\n        static getConeection(){\r\n            return new Promise((resolve, reject)=>{\r\n                let openRequest = window.indexedDB.open(dbName, version)\r\n                openRequest.onupgradeneeded =(e)=>{\r\n                    ConnectionFactory._createConnection(e.target.result)\r\n                }\r\n                openRequest.onsuccess=(e)=>{\r\n\r\n                    if(!connection){\r\n                        connection = e.target.result\r\n                        close = connection.close.bind(connection)\r\n                        connection.close = function(){\r\n                            throw Error('Vc nÃ£o pode chmamar a connection.close direto')\r\n                        }\r\n                    }\r\n                        resolve(connection)\r\n                }\r\n                openRequest.onerror=(e)=>{\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                }\r\n            })\r\n        }\r\n\r\n        static _createConnection(connection){\r\n            stores.forEach(store =>{\r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store)\r\n                }\r\n                connection.createObjectStore(store, {autoIncrement: true})\r\n            })\r\n        }\r\n        static closeConnection(){\r\n            close()\r\n            connection = null\r\n        }\r\n    }\r\n\r\n/*\r\n    colocar a function entre parente (function(){})\r\n    depois invoca ela com ()\r\n    e estou dando o return na class para que eu possa usar quando__\r\n    chamar a var ConnectionFactory, assim posso usar todas as prop da class\r\n*/"]}